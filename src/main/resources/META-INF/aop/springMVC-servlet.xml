<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	  	http://www.springframework.org/schema/mvc
	 	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	 	http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd"
	default-lazy-init="true">
	
	<!--实现区分各层的注解和参数配置 -->
	<mvc:annotation-driven />
	
	<!--扫包，实现controller层 注入-->
	<context:component-scan base-package="com.zhanglf.**.api"></context:component-scan>
	
	<!-- 在mvc:interceptors标签下声明interceptor主要有两种方式：（1）直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。（2）使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。 -->
	<mvc:interceptors>
		<!-- 直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<mvc:interceptor>
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求(path 对应的是请求路径，不是类路径)才进行拦截的 -->
			<mvc:mapping path="/log/show" />
			<bean class="com.zhanglf.interceptor.SecuretyInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。 -->

</beans>